include mixins/bytes

- instance = context.instance
- deployment = context.deployment

mixin panel(title)
  .panel.panel-default
    .panel-heading: .panel-title #{title}
    .panel-body
      block

mixin navpanel(title)
  .panel.panel-default
    .panel-heading: .panel-title #{title}
    .list-group
      block

mixin splitpanel(title)
  .panel.panel-default
    .panel-heading: .panel-title #{title}
    block

mixin deet(key)
  tr
    td.small(style='padding-left: 0;') #{key}
    td(style='background-color: #f5f5f5;')
      block

mixin log_panel()
  .panel.panel-default
    .panel-heading
      .pull-right
        i.fa.fa-long-arrow-up.fa-fw
        | newest on top
      .panel-title Log
    .panel-body
      .log-container

mixin instance_detail()
  - build = instance.build
  - host = instance.host

  +panel('Server')
    table.table
      +deet('Hostname')
        | #{instance.id}
      +deet('MongoDB')
        | #{build.version}
      +deet('Deployment')
        | #{deployment.type}
      +deet('Instance')
        | #{instance.type || 'mongod'}
      +deet('Platform')
        | #{host.os} #{host.cpu_bits}bit
      +deet('Real RAM')
        +bytes(host.memory_bits)
      +deet('CPU Detail')
        | #{host.cpu_string}
      +deet('Host Time')
        | #{host.system_time}

ol.breadcrumb
  unless context.deployment.type === 'standalone'
    li: a(href='#home') #{context.deployment.name}
  li #{context.instance.id}

if deployment.type === 'standalone'
  h1.page-header #{instance.id}
  .row
    .col-md-6
      +navpanel('Databases')
        each db in instance.database_names
          a.list-group-item(href="#database/#{db}")
            .pull-left: i.fa.fa-angle-right.fa-fw
            .list-group-item-heading #{db}

    .col-md-6
      +instance_detail()
  hr
  .row
    .col-md-12
      +log_panel()

else
  h1.page-header #{deployment.name}
      p.lead.subtle via #{instance.id} #{instance.type ? '(' +instance.type+ ')' : ''}

    .row
      .col-md-6
        +navpanel('Databases')
          each db in instance.database_names
            a.list-group-item(href="#database/#{db}")
              .pull-left: i.fa.fa-angle-right.fa-fw
              .list-group-item-heading #{db}
      .col-md-6
        +instance_detail()

  if deployment.type === 'cluster'
    hr
    .row
      .col-md-6
        .panel.panel-default
          .panel-heading: .panel-title cluster instances
          .list-group
            .list-group-header(style='display: none;')
              .icon.fa-search
              input(placeholder='filter instances')
            .list-group-body
              .list-group-label routers
              each instance in deployment.routers
                a.list-group-item(href="#connect/#{deployment.id}/#{instance.id}")
                  .pull-left: i.fa.fa-angle-right.fa-fw
                  .list-group-item-heading #{instance.name}
              .list-group-label configs
              each instance in deployment.configs
                a.list-group-item(href="#connect/#{deployment.id}/#{instance.id}")
                  .pull-left: i.fa.fa-angle-right.fa-fw
                  .list-group-item-heading #{instance.name}
              each shard in deployment.shards
                .list-group-label shard #{shard.name}
                each instance in shard.instances
                  a.list-group-item(href="#connect/#{deployment.id}/#{instance.id}")
                    .pull-left: i.fa.fa-angle-right.fa-fw
                    .list-group-item-heading #{instance.name}
    hr
    .row
      .col-md-12
        +log_panel()

  if deployment.type === 'replicaset'
    if deployment.maybe_sharded
      .warning
        p
          | you may not be getting the full picture here.  it seems you've connected
          | directly to a shard but not through a router.  please yadaya to
          | make sure you're seeing the full deatils.

    - oplog = deployment.replication.oplog
    .row
      .col-md-4: +panel('Primary')
        h2 #{replication.primary.name}

      .col-md-4: +panel('Secondaries')
        ul.list-group: each instance in deployment.secondaries
          li.list-group-item
            .primary-line #{member.name}
            .label.label-default #{member.state}
            .secondary-line replication lag #{member.lag_replication}ms
            .secondary-line operational lag #{member.lag_operational}ms

      .col-md-4: +panel('Arbiters')
        .list-group: each instance in deployment.arbiters
          a.list-group-item(href="#connect/#{deployment.id}/#{instance.id}") #{instance.name}
    .row
      .col-md-4: +panel('Oplog')
        ul.list-group
          li.list-group-item
            span.badge #{oplog.count}
            | Operations
          li.list-group-item
            span.badge #{moment(oplog.window[0]).from(oplog.window[1], true)}
            | Window
          li.list-group-item
            span.badge: +bytes(deployment.replication.options.size)
            | Size

      .col-md-4: +panel('Window')
        h4 #{moment(oplog.window[0]).from(oplog.window[1], true)}
        h5 Newest
        pre: code #{JSON.stringify(replication.oplog.tail)}

        h5 Oldest
        pre: code #{JSON.stringify(replication.oplog.head)}

      .col-md-4: +panel('Live')
        p @todo: stream in from /oplog
